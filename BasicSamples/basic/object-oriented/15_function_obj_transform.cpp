//
// Created by Frewen.Wong on 2021/2/27.
//

//函数中传递对象参数和传递一般数据类型参数的方式大同小异，只要将函数参数行原先的一般数据类型改为类名称即可。

//对象传值调用

//首先介绍对象传值调用的方式。在调用该函数时以对象作为函数的参数来进行成员函数的调用，语法如下：
//函数返回值类型  函数名称（类名称1  参数1, 类名称2  参数2, ……）
//{
//  函数的程序代码
//}

//例如，以两个对象参数为例，其调用方式为：
//      对象名称．函数名称(对象参数1，对象参数2);


//对象传址调用

//对象传址调用是指所传入的参数为对象的内存地址，即以“&”运算符将地址传给函数，在函数内则通过结构指针来存取对象数据，语法如下：
//函数类型  函数名称（类名称1  ＊参数1, 类名称2  ＊参数2, ……）
//{
//  函数的程序代码
//}

//以两个对象参数为例，其调用方式为：
//      对象名称．函数名称(&对象参数1, &对象参数2);


//对象传引用调用

//C++中的传引用调用方式比传址调用的应用容易理解，因为它本身只是别名（alias）的应用。
//在使用对象传引用调用时，只需要在函数原型和定义函数所要传递的参数前加上&运算符即可。
//另外，引用使用“.”来存取对象成员。函数原型声明如下：

//函数类型  函数名称（类名称1  &参数1, 类名称2  &参数2, ……）
//{
//   函数的程序代码
//}

//对象名称．函数名称(对象参数1，对象参数2);


#include <cstdio>

/**
 * 传值调用
 * @param x
 * @param y
 */
void swapValue(int x, int y) {
    int tmp = x;
    x = y;
    y = tmp;
}

/**
 * 形参是x和y的两个指针
 * @param x
 * @param y
 */
void swapAddress(int *x, int *y) {
    int tmp = *x;
    *x = *y;
    *y = tmp;
}

void swapRef(int &x, int &y) {
    int tmp = x;
    x = y;
    y = tmp;
}

int main() {
    int a = 1, b = 2;
    printf("a=%d, b=%d\n", a, b);
    swapValue(a, b);
    printf("a=%d, b=%d\n", a, b);


    int c = 1, d = 2;
    printf("c=%d, d=%d\n", c, d);
    // 通过取值符号进行后区c和d的内存地址
    swapAddress(&c, &d);
    printf("c=%d, d=%d\n", c, d);

    /**
     * 完成了交换
     * 可以看到实现了两个数字的交换，但是这里的语法和上面的两种都不一样，这里并没有实参到形参的拷贝，
     * 而是直接将main里面的a, b传到swap里面，所以当然交换的就是a, b的值。
     */
    int e = 1, f = 2;
    printf("e=%d, f=%d\n", e, f);
    // 通过取值符号进行后区c和d的内存地址
    swapRef(e, f);
    printf("e=%d, d=%d\n", e, f);
    return 0;
}

